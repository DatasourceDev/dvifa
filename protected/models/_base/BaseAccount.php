<?php

/**
 * This is the model base class for the table "account".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Account".
 *
 * Columns in table "account" available as properties of the model,
 * followed by relations of table "account" available as properties of the model.
 *
 * @property string $id
 * @property string $account_type_id
 * @property string $entry_code
 * @property string $username
 * @property string $secret
 * @property string $created
 * @property string $modified
 * @property string $account_group_id
 * @property string $confirmation_code
 * @property string $confirmation_date
 * @property integer $status
 * @property string $secure_question_1
 * @property string $secure_answer_1
 * @property string $secure_question_2
 * @property string $secure_answer_2
 * @property string $tmp_password
 * @property integer $is_staff_user
 * @property integer $is_office_user
 * @property string $session_key
 * @property string $session_ip
 * @property string $session_timeout
 * @property string $expire_date
 * @property integer $is_update_require
 * @property integer $is_disable
 * @property string $legacy_secret
 * @property integer $is_legacy
 * @property string $legacy_date
 * @property integer $is_legacy_update
 *
 * @property AccountGroup $accountGroup
 * @property AccountType $accountType
 * @property AccountOverseaPosting[] $accountOverseaPostings
 * @property AccountProfileDiplomatForeigner $accountProfileDiplomatForeigner
 * @property AccountProfileDiplomatThai $accountProfileDiplomatThai
 * @property AccountProfileGeneralForeigner $accountProfileGeneralForeigner
 * @property AccountProfileGeneralThai $accountProfileGeneralThai
 * @property AccountProfileOfficeUser $accountProfileOfficeUser
 * @property Tag[] $tags
 * @property ExamApplication[] $examApplications
 * @property ExamSchedule[] $examSchedules
 */
abstract class BaseAccount extends ActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'account';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Account|Accounts', $n);
	}

	public static function representingColumn() {
		return 'entry_code';
	}

	public function rules() {
		return array(
			array('status, is_staff_user, is_office_user, is_update_require, is_disable, is_legacy, is_legacy_update', 'numerical', 'integerOnly'=>true),
			array('account_type_id, account_group_id', 'length', 'max'=>10),
			array('entry_code', 'length', 'max'=>13),
			array('username, confirmation_code, secure_question_1, secure_answer_1, secure_question_2, secure_answer_2, session_ip', 'length', 'max'=>60),
			array('secret, legacy_secret', 'length', 'max'=>128),
			array('tmp_password, session_key', 'length', 'max'=>64),
			array('created, modified, confirmation_date, session_timeout, expire_date, legacy_date', 'safe'),
			array('account_type_id, entry_code, username, secret, created, modified, account_group_id, confirmation_code, confirmation_date, status, secure_question_1, secure_answer_1, secure_question_2, secure_answer_2, tmp_password, is_staff_user, is_office_user, session_key, session_ip, session_timeout, expire_date, is_update_require, is_disable, legacy_secret, is_legacy, legacy_date, is_legacy_update', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, account_type_id, entry_code, username, secret, created, modified, account_group_id, confirmation_code, confirmation_date, status, secure_question_1, secure_answer_1, secure_question_2, secure_answer_2, tmp_password, is_staff_user, is_office_user, session_key, session_ip, session_timeout, expire_date, is_update_require, is_disable, legacy_secret, is_legacy, legacy_date, is_legacy_update', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'accountGroup' => array(self::BELONGS_TO, 'AccountGroup', 'account_group_id'),
			'accountType' => array(self::BELONGS_TO, 'AccountType', 'account_type_id'),
			'accountOverseaPostings' => array(self::HAS_MANY, 'AccountOverseaPosting', 'account_id'),
			'accountProfileDiplomatForeigner' => array(self::HAS_ONE, 'AccountProfileDiplomatForeigner', 'account_id'),
			'accountProfileDiplomatThai' => array(self::HAS_ONE, 'AccountProfileDiplomatThai', 'account_id'),
			'accountProfileGeneralForeigner' => array(self::HAS_ONE, 'AccountProfileGeneralForeigner', 'account_id'),
			'accountProfileGeneralThai' => array(self::HAS_ONE, 'AccountProfileGeneralThai', 'account_id'),
			'accountProfileOfficeUser' => array(self::HAS_ONE, 'AccountProfileOfficeUser', 'account_id'),
			'tags' => array(self::MANY_MANY, 'Tag', 'account_tag(account_id, tag_id)'),
			'examApplications' => array(self::HAS_MANY, 'ExamApplication', 'account_id'),
			'examSchedules' => array(self::MANY_MANY, 'ExamSchedule', 'exam_schedule_account(account_id, exam_schedule_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'tags' => 'AccountTag',
			'examSchedules' => 'ExamScheduleAccount',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'account_type_id' => null,
			'entry_code' => Yii::t('app', 'Entry Code'),
			'username' => Yii::t('app', 'Username'),
			'secret' => Yii::t('app', 'Secret'),
			'created' => Yii::t('app', 'Created'),
			'modified' => Yii::t('app', 'Modified'),
			'account_group_id' => null,
			'confirmation_code' => Yii::t('app', 'Confirmation Code'),
			'confirmation_date' => Yii::t('app', 'Confirmation Date'),
			'status' => Yii::t('app', 'Status'),
			'secure_question_1' => Yii::t('app', 'Secure Question 1'),
			'secure_answer_1' => Yii::t('app', 'Secure Answer 1'),
			'secure_question_2' => Yii::t('app', 'Secure Question 2'),
			'secure_answer_2' => Yii::t('app', 'Secure Answer 2'),
			'tmp_password' => Yii::t('app', 'Tmp Password'),
			'is_staff_user' => Yii::t('app', 'Is Staff User'),
			'is_office_user' => Yii::t('app', 'Is Office User'),
			'session_key' => Yii::t('app', 'Session Key'),
			'session_ip' => Yii::t('app', 'Session Ip'),
			'session_timeout' => Yii::t('app', 'Session Timeout'),
			'expire_date' => Yii::t('app', 'Expire Date'),
			'is_update_require' => Yii::t('app', 'Is Update Require'),
			'is_disable' => Yii::t('app', 'Is Disable'),
			'legacy_secret' => Yii::t('app', 'Legacy Secret'),
			'is_legacy' => Yii::t('app', 'Is Legacy'),
			'legacy_date' => Yii::t('app', 'Legacy Date'),
			'is_legacy_update' => Yii::t('app', 'Is Legacy Update'),
			'accountGroup' => null,
			'accountType' => null,
			'accountOverseaPostings' => null,
			'accountProfileDiplomatForeigner' => null,
			'accountProfileDiplomatThai' => null,
			'accountProfileGeneralForeigner' => null,
			'accountProfileGeneralThai' => null,
			'accountProfileOfficeUser' => null,
			'tags' => null,
			'examApplications' => null,
			'examSchedules' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('account_type_id', $this->account_type_id);
		$criteria->compare('entry_code', $this->entry_code, true);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('secret', $this->secret, true);
		$criteria->compare('created', $this->created, true);
		$criteria->compare('modified', $this->modified, true);
		$criteria->compare('account_group_id', $this->account_group_id);
		$criteria->compare('confirmation_code', $this->confirmation_code, true);
		$criteria->compare('confirmation_date', $this->confirmation_date, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('secure_question_1', $this->secure_question_1, true);
		$criteria->compare('secure_answer_1', $this->secure_answer_1, true);
		$criteria->compare('secure_question_2', $this->secure_question_2, true);
		$criteria->compare('secure_answer_2', $this->secure_answer_2, true);
		$criteria->compare('tmp_password', $this->tmp_password, true);
		$criteria->compare('is_staff_user', $this->is_staff_user);
		$criteria->compare('is_office_user', $this->is_office_user);
		$criteria->compare('session_key', $this->session_key, true);
		$criteria->compare('session_ip', $this->session_ip, true);
		$criteria->compare('session_timeout', $this->session_timeout, true);
		$criteria->compare('expire_date', $this->expire_date, true);
		$criteria->compare('is_update_require', $this->is_update_require);
		$criteria->compare('is_disable', $this->is_disable);
		$criteria->compare('legacy_secret', $this->legacy_secret, true);
		$criteria->compare('is_legacy', $this->is_legacy);
		$criteria->compare('legacy_date', $this->legacy_date, true);
		$criteria->compare('is_legacy_update', $this->is_legacy_update);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}