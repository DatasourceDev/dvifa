<?php

/**
 * This is the model base class for the table "exam_application".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ExamApplication".
 *
 * Columns in table "exam_application" available as properties of the model,
 * followed by relations of table "exam_application" available as properties of the model.
 *
 * @property string $id
 * @property string $exam_schedule_id
 * @property string $account_id
 * @property integer $status
 * @property integer $desk_no
 * @property integer $sms_alert_status
 * @property string $capital_name
 * @property string $capital_description
 * @property integer $is_sms
 * @property string $msisdn
 * @property string $objective
 * @property string $created
 * @property string $modified
 * @property integer $is_paid
 * @property integer $is_present
 * @property string $confirm_date
 * @property string $desk_code
 * @property string $payment_code
 * @property string $office_user_id
 * @property string $payment_amount
 * @property string $apply_date
 * @property string $due_date
 * @property integer $exam_schedule_objective_id
 * @property integer $application_year
 * @property integer $application_type
 * @property integer $application_no
 * @property string $payment_tax
 * @property string $payment_suffix
 * @property string $payment_date
 * @property integer $receipt_id
 * @property string $exam_set_id
 * @property integer $is_applicable
 * @property string $applicable_error
 * @property integer $is_grade_confirm
 * @property string $grade_confirm_date
 * @property integer $grade_confirm_user_id
 * @property string $fullname_th
 * @property string $fullname_en
 * @property string $department
 * @property string $office
 * @property string $position
 * @property string $level
 * @property integer $apply_type
 * @property integer $is_confirm
 * @property integer $is_present_prevent
 * @property integer $work_year
 * @property string $title_th
 * @property string $firstname_th
 * @property string $midname_th
 * @property string $lastname_th
 * @property string $title_en
 * @property string $firstname_en
 * @property string $midname_en
 * @property string $lastname_en
 * @property string $department_th
 * @property string $office_th
 * @property integer $present_account_id
 * @property string $present_date
 *
 * @property ApplicationExamAnswer[] $applicationExamAnswers
 * @property ApplicationPayment[] $applicationPayments
 * @property ApplicationScore[] $applicationScores
 * @property Account $account
 * @property ExamSchedule $examSchedule
 * @property ExamApplicationExamSet[] $examApplicationExamSets
 * @property ExamApplicationExamSetAudit[] $examApplicationExamSetAudits
 * @property ExamOmrStore $examOmrStore
 */
abstract class BaseExamApplication extends ActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'exam_application';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ExamApplication|ExamApplications', $n);
	}

	public static function representingColumn() {
		return 'capital_name';
	}

	public function rules() {
		return array(
			array('exam_schedule_id, account_id', 'required'),
			array('status, desk_no, sms_alert_status, is_sms, is_paid, is_present, exam_schedule_objective_id, application_year, application_type, application_no, receipt_id, is_applicable, is_grade_confirm, grade_confirm_user_id, apply_type, is_confirm, is_present_prevent, work_year, present_account_id, temp_order_index', 'numerical', 'integerOnly'=>true),
			array('exam_schedule_id, account_id, office_user_id, payment_amount, exam_set_id', 'length', 'max'=>10),
			array('capital_name, department, office, department_th, office_th', 'length', 'max'=>250),
			array('msisdn, desk_code, payment_code, level, title_th, title_en', 'length', 'max'=>60),
			array('objective, fullname_th, fullname_en', 'length', 'max'=>150),
			array('payment_tax', 'length', 'max'=>13),
			array('payment_suffix', 'length', 'max'=>2),
			array('position, firstname_th, midname_th, lastname_th, firstname_en, midname_en, lastname_en', 'length', 'max'=>100),
			array('capital_description, created, modified, confirm_date, apply_date, due_date, payment_date, applicable_error, grade_confirm_date, present_date', 'safe'),
			array('status, desk_no, sms_alert_status, capital_name, capital_description, is_sms, msisdn, objective, created, modified, is_paid, is_present, confirm_date, desk_code, payment_code, office_user_id, payment_amount, apply_date, due_date, exam_schedule_objective_id, application_year, application_type, application_no, payment_tax, payment_suffix, payment_date, receipt_id, exam_set_id, is_applicable, applicable_error, is_grade_confirm, grade_confirm_date, grade_confirm_user_id, fullname_th, fullname_en, department, office, position, level, apply_type, is_confirm, is_present_prevent, work_year, title_th, firstname_th, midname_th, lastname_th, title_en, firstname_en, midname_en, lastname_en, department_th, office_th, present_account_id, present_date', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, exam_schedule_id, account_id, status, desk_no, sms_alert_status, capital_name, capital_description, is_sms, msisdn, objective, created, modified, is_paid, is_present, confirm_date, desk_code, payment_code, office_user_id, payment_amount, apply_date, due_date, exam_schedule_objective_id, application_year, application_type, application_no, payment_tax, payment_suffix, payment_date, receipt_id, exam_set_id, is_applicable, applicable_error, is_grade_confirm, grade_confirm_date, grade_confirm_user_id, fullname_th, fullname_en, department, office, position, level, apply_type, is_confirm, is_present_prevent, work_year, title_th, firstname_th, midname_th, lastname_th, title_en, firstname_en, midname_en, lastname_en, department_th, office_th, present_account_id, present_date', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'applicationExamAnswers' => array(self::HAS_MANY, 'ApplicationExamAnswer', 'exam_application_id'),
			'applicationPayments' => array(self::HAS_MANY, 'ApplicationPayment', 'exam_application_id'),
			'applicationScores' => array(self::HAS_MANY, 'ApplicationScore', 'exam_application_id'),
			'account' => array(self::BELONGS_TO, 'Account', 'account_id'),
			'examSchedule' => array(self::BELONGS_TO, 'ExamSchedule', 'exam_schedule_id'),
			'examApplicationExamSets' => array(self::HAS_MANY, 'ExamApplicationExamSet', 'exam_application_id'),
			'examApplicationExamSetAudits' => array(self::HAS_MANY, 'ExamApplicationExamSetAudit', 'exam_application_id'),
			'examOmrStore' => array(self::HAS_ONE, 'ExamOmrStore', 'exam_application_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'exam_schedule_id' => null,
			'account_id' => null,
			'status' => Yii::t('app', 'Status'),
			'desk_no' => Yii::t('app', 'Desk No'),
			'sms_alert_status' => Yii::t('app', 'Sms Alert Status'),
			'capital_name' => Yii::t('app', 'Capital Name'),
			'capital_description' => Yii::t('app', 'Capital Description'),
			'is_sms' => Yii::t('app', 'Is Sms'),
			'msisdn' => Yii::t('app', 'Msisdn'),
			'objective' => Yii::t('app', 'Objective'),
			'created' => Yii::t('app', 'Created'),
			'modified' => Yii::t('app', 'Modified'),
			'is_paid' => Yii::t('app', 'Is Paid'),
			'is_present' => Yii::t('app', 'Is Present'),
			'confirm_date' => Yii::t('app', 'Confirm Date'),
			'desk_code' => Yii::t('app', 'Desk Code'),
			'payment_code' => Yii::t('app', 'Payment Code'),
			'office_user_id' => Yii::t('app', 'Office User'),
			'payment_amount' => Yii::t('app', 'Payment Amount'),
			'apply_date' => Yii::t('app', 'Apply Date'),
			'due_date' => Yii::t('app', 'Due Date'),
			'exam_schedule_objective_id' => Yii::t('app', 'Exam Schedule Objective'),
			'application_year' => Yii::t('app', 'Application Year'),
			'application_type' => Yii::t('app', 'Application Type'),
			'application_no' => Yii::t('app', 'Application No'),
			'payment_tax' => Yii::t('app', 'Payment Tax'),
			'payment_suffix' => Yii::t('app', 'Payment Suffix'),
			'payment_date' => Yii::t('app', 'Payment Date'),
			'receipt_id' => Yii::t('app', 'Receipt'),
			'exam_set_id' => Yii::t('app', 'Exam Set'),
			'is_applicable' => Yii::t('app', 'Is Applicable'),
			'applicable_error' => Yii::t('app', 'Applicable Error'),
			'is_grade_confirm' => Yii::t('app', 'Is Grade Confirm'),
			'grade_confirm_date' => Yii::t('app', 'Grade Confirm Date'),
			'grade_confirm_user_id' => Yii::t('app', 'Grade Confirm User'),
			'fullname_th' => Yii::t('app', 'Fullname Th'),
			'fullname_en' => Yii::t('app', 'Fullname En'),
			'department' => Yii::t('app', 'Department'),
			'office' => Yii::t('app', 'Office'),
			'position' => Yii::t('app', 'Position'),
			'level' => Yii::t('app', 'Level'),
			'apply_type' => Yii::t('app', 'Apply Type'),
			'is_confirm' => Yii::t('app', 'Is Confirm'),
			'is_present_prevent' => Yii::t('app', 'Is Present Prevent'),
			'work_year' => Yii::t('app', 'Work Year'),
			'title_th' => Yii::t('app', 'Title Th'),
			'firstname_th' => Yii::t('app', 'Firstname Th'),
			'midname_th' => Yii::t('app', 'Midname Th'),
			'lastname_th' => Yii::t('app', 'Lastname Th'),
			'title_en' => Yii::t('app', 'Title En'),
			'firstname_en' => Yii::t('app', 'Firstname En'),
			'midname_en' => Yii::t('app', 'Midname En'),
			'lastname_en' => Yii::t('app', 'Lastname En'),
			'department_th' => Yii::t('app', 'Department Th'),
			'office_th' => Yii::t('app', 'Office Th'),
			'present_account_id' => Yii::t('app', 'Present Account'),
			'present_date' => Yii::t('app', 'Present Date'),
			'applicationExamAnswers' => null,
			'applicationPayments' => null,
			'applicationScores' => null,
			'account' => null,
			'examSchedule' => null,
			'examApplicationExamSets' => null,
			'examApplicationExamSetAudits' => null,
			'examOmrStore' => null,
			'is_request' => Yii::t('app', 'Is Request'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('exam_schedule_id', $this->exam_schedule_id);
		$criteria->compare('account_id', $this->account_id);
		$criteria->compare('status', $this->status);
		$criteria->compare('desk_no', $this->desk_no);
		$criteria->compare('sms_alert_status', $this->sms_alert_status);
		$criteria->compare('capital_name', $this->capital_name, true);
		$criteria->compare('capital_description', $this->capital_description, true);
		$criteria->compare('is_sms', $this->is_sms);
		$criteria->compare('msisdn', $this->msisdn, true);
		$criteria->compare('objective', $this->objective, true);
		$criteria->compare('created', $this->created, true);
		$criteria->compare('modified', $this->modified, true);
		$criteria->compare('is_paid', $this->is_paid);
		$criteria->compare('is_present', $this->is_present);
		$criteria->compare('confirm_date', $this->confirm_date, true);
		$criteria->compare('desk_code', $this->desk_code, true);
		$criteria->compare('payment_code', $this->payment_code, true);
		$criteria->compare('office_user_id', $this->office_user_id, true);
		$criteria->compare('payment_amount', $this->payment_amount, true);
		$criteria->compare('apply_date', $this->apply_date, true);
		$criteria->compare('due_date', $this->due_date, true);
		$criteria->compare('exam_schedule_objective_id', $this->exam_schedule_objective_id);
		$criteria->compare('application_year', $this->application_year);
		$criteria->compare('application_type', $this->application_type);
		$criteria->compare('application_no', $this->application_no);
		$criteria->compare('payment_tax', $this->payment_tax, true);
		$criteria->compare('payment_suffix', $this->payment_suffix, true);
		$criteria->compare('payment_date', $this->payment_date, true);
		$criteria->compare('receipt_id', $this->receipt_id);
		$criteria->compare('exam_set_id', $this->exam_set_id, true);
		$criteria->compare('is_applicable', $this->is_applicable);
		$criteria->compare('applicable_error', $this->applicable_error, true);
		$criteria->compare('is_grade_confirm', $this->is_grade_confirm);
		$criteria->compare('grade_confirm_date', $this->grade_confirm_date, true);
		$criteria->compare('grade_confirm_user_id', $this->grade_confirm_user_id);
		$criteria->compare('fullname_th', $this->fullname_th, true);
		$criteria->compare('fullname_en', $this->fullname_en, true);
		$criteria->compare('department', $this->department, true);
		$criteria->compare('office', $this->office, true);
		$criteria->compare('position', $this->position, true);
		$criteria->compare('level', $this->level, true);
		$criteria->compare('apply_type', $this->apply_type);
		$criteria->compare('is_confirm', $this->is_confirm);
		$criteria->compare('is_present_prevent', $this->is_present_prevent);
		$criteria->compare('work_year', $this->work_year);
		$criteria->compare('title_th', $this->title_th, true);
		$criteria->compare('firstname_th', $this->firstname_th, true);
		$criteria->compare('midname_th', $this->midname_th, true);
		$criteria->compare('lastname_th', $this->lastname_th, true);
		$criteria->compare('title_en', $this->title_en, true);
		$criteria->compare('firstname_en', $this->firstname_en, true);
		$criteria->compare('midname_en', $this->midname_en, true);
		$criteria->compare('lastname_en', $this->lastname_en, true);
		$criteria->compare('department_th', $this->department_th, true);
		$criteria->compare('office_th', $this->office_th, true);
		$criteria->compare('present_account_id', $this->present_account_id);
		$criteria->compare('present_date', $this->present_date, true);
		$criteria->compare('is_request', $this->is_request);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}