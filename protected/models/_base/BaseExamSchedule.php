<?php

/**
 * This is the model base class for the table "exam_schedule".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ExamSchedule".
 *
 * Columns in table "exam_schedule" available as properties of the model,
 * followed by relations of table "exam_schedule" available as properties of the model.
 *
 * @property string $id
 * @property string $exam_type_id
 * @property string $exam_code
 * @property string $db_date
 * @property string $place_name
 * @property string $place_remark
 * @property integer $max_quota
 * @property string $remark
 * @property string $register_fee
 * @property integer $is_private
 * @property integer $exam_num
 * @property integer $code_place_id
 * @property integer $is_close
 * @property string $close_description
 * @property string $place_name_en
 * @property string $place_remark_en
 * @property string $calendar_color
 * @property string $exception_register_start_date
 * @property string $exception_register_end_date
 * @property int $temp_order_index
 *
 * @property ApplicationExamAnswer[] $applicationExamAnswers
 * @property ExamApplication[] $examApplications
 * @property ExamApplicationExamSet[] $examApplicationExamSets
 * @property ExamApplicationExamSetAudit[] $examApplicationExamSetAudits
 * @property ExamType $examType
 * @property Account[] $accounts
 * @property ExamScheduleItem[] $examScheduleItems
 * @property ExamScheduleObjective[] $examScheduleObjectives
 */
abstract class BaseExamSchedule extends ActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'exam_schedule';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ExamSchedule|ExamSchedules', $n);
	}

	public static function representingColumn() {
		return 'exam_code';
	}

	public function rules() {
		return array(
			array('exam_type_id', 'required'),
			array('max_quota, is_private, exam_num, code_place_id, is_close', 'numerical', 'integerOnly'=>true),
			array('exam_type_id, exam_code, register_fee', 'length', 'max'=>10),
			array('place_name, place_name_en', 'length', 'max'=>150),
			array('calendar_color', 'length', 'max'=>7),
			array('db_date, place_remark, remark, close_description, place_remark_en, exception_register_start_date, exception_register_end_date', 'safe'),
			array('exam_code, db_date, place_name, place_remark, max_quota, remark, register_fee, is_private, exam_num, code_place_id, is_close, close_description, place_name_en, place_remark_en, calendar_color, exception_register_start_date, exception_register_end_date', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, exam_type_id, exam_code, db_date, place_name, place_remark, max_quota, remark, register_fee, is_private, exam_num, code_place_id, is_close, close_description, place_name_en, place_remark_en, calendar_color, exception_register_start_date, exception_register_end_date', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'applicationExamAnswers' => array(self::HAS_MANY, 'ApplicationExamAnswer', 'exam_schedule_id'),
			'examApplications' => array(self::HAS_MANY, 'ExamApplication', 'exam_schedule_id'),
			'examApplicationExamSets' => array(self::HAS_MANY, 'ExamApplicationExamSet', 'exam_schedule_id'),
			'examApplicationExamSetAudits' => array(self::HAS_MANY, 'ExamApplicationExamSetAudit', 'exam_schedule_id'),
			'examType' => array(self::BELONGS_TO, 'ExamType', 'exam_type_id'),
			'accounts' => array(self::MANY_MANY, 'Account', 'exam_schedule_account(exam_schedule_id, account_id)'),
			'examScheduleItems' => array(self::HAS_MANY, 'ExamScheduleItem', 'exam_schedule_id'),
			'examScheduleObjectives' => array(self::HAS_MANY, 'ExamScheduleObjective', 'exam_schedule_id'),
		);
	}

	public function pivotModels() {
		return array(
			'accounts' => 'ExamScheduleAccount',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'exam_type_id' => null,
			'exam_code' => Yii::t('app', 'Exam Code'),
			'db_date' => Yii::t('app', 'Db Date'),
			'place_name' => Yii::t('app', 'Place Name'),
			'place_remark' => Yii::t('app', 'Place Remark'),
			'max_quota' => Yii::t('app', 'Max Quota'),
			'remark' => Yii::t('app', 'Remark'),
			'register_fee' => Yii::t('app', 'Register Fee'),
			'is_private' => Yii::t('app', 'Is Private'),
			'exam_num' => Yii::t('app', 'Exam Num'),
			'code_place_id' => Yii::t('app', 'Code Place'),
			'is_close' => Yii::t('app', 'Is Close'),
			'close_description' => Yii::t('app', 'Close Description'),
			'place_name_en' => Yii::t('app', 'Place Name En'),
			'place_remark_en' => Yii::t('app', 'Place Remark En'),
			'calendar_color' => Yii::t('app', 'Calendar Color'),
			'exception_register_start_date' => Yii::t('app', 'Exception Register Start Date'),
			'exception_register_end_date' => Yii::t('app', 'Exception Register End Date'),
			'applicationExamAnswers' => null,
			'examApplications' => null,
			'examApplicationExamSets' => null,
			'examApplicationExamSetAudits' => null,
			'examType' => null,
			'accounts' => null,
			'examScheduleItems' => null,
			'examScheduleObjectives' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('exam_type_id', $this->exam_type_id);
		$criteria->compare('exam_code', $this->exam_code, true);
		$criteria->compare('db_date', $this->db_date, true);
		$criteria->compare('place_name', $this->place_name, true);
		$criteria->compare('place_remark', $this->place_remark, true);
		$criteria->compare('max_quota', $this->max_quota);
		$criteria->compare('remark', $this->remark, true);
		$criteria->compare('register_fee', $this->register_fee, true);
		$criteria->compare('is_private', $this->is_private);
		$criteria->compare('exam_num', $this->exam_num);
		$criteria->compare('code_place_id', $this->code_place_id);
		$criteria->compare('is_close', $this->is_close);
		$criteria->compare('close_description', $this->close_description, true);
		$criteria->compare('place_name_en', $this->place_name_en, true);
		$criteria->compare('place_remark_en', $this->place_remark_en, true);
		$criteria->compare('calendar_color', $this->calendar_color, true);
		$criteria->compare('exception_register_start_date', $this->exception_register_start_date, true);
		$criteria->compare('exception_register_end_date', $this->exception_register_end_date, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}