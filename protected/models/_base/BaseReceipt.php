<?php

/**
 * This is the model base class for the table "receipt".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Receipt".
 *
 * Columns in table "receipt" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $id
 * @property integer $doc_year
 * @property integer $doc_no
 * @property string $doc_name
 * @property string $payment_date
 * @property string $amount
 * @property string $payer_name
 * @property integer $exam_application_id
 * @property integer $exam_schedule_id
 * @property string $created
 * @property string $modified
 * @property integer $is_office
 * @property integer $doc_sub
 * @property string $receipt_approver
 * @property string $receipt_position
 * @property integer $receipt_year
 * @property integer $receipt_no
 * @property string $receipt_income_code
 * @property string $payer_code
 * @property integer $approve_id
 * @property string $approve_name
 * @property string $approve_position
 *
 */
abstract class BaseReceipt extends ActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'receipt';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Receipt|Receipts', $n);
	}

	public static function representingColumn() {
		return 'doc_name';
	}

	public function rules() {
		return array(
			array('doc_year, doc_no, exam_application_id, exam_schedule_id, is_office, doc_sub, receipt_year, receipt_no, approve_id', 'numerical', 'integerOnly'=>true),
			array('doc_name, payer_code', 'length', 'max'=>60),
			array('amount', 'length', 'max'=>16),
			array('payer_name, receipt_approver, receipt_position, approve_name', 'length', 'max'=>200),
			array('receipt_income_code', 'length', 'max'=>10),
			array('approve_position', 'length', 'max'=>100),
			array('payment_date, created, modified', 'safe'),
			array('doc_year, doc_no, doc_name, payment_date, amount, payer_name, exam_application_id, exam_schedule_id, created, modified, is_office, doc_sub, receipt_approver, receipt_position, receipt_year, receipt_no, receipt_income_code, payer_code, approve_id, approve_name, approve_position', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, doc_year, doc_no, doc_name, payment_date, amount, payer_name, exam_application_id, exam_schedule_id, created, modified, is_office, doc_sub, receipt_approver, receipt_position, receipt_year, receipt_no, receipt_income_code, payer_code, approve_id, approve_name, approve_position', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'doc_year' => Yii::t('app', 'Doc Year'),
			'doc_no' => Yii::t('app', 'Doc No'),
			'doc_name' => Yii::t('app', 'Doc Name'),
			'payment_date' => Yii::t('app', 'Payment Date'),
			'amount' => Yii::t('app', 'Amount'),
			'payer_name' => Yii::t('app', 'Payer Name'),
			'exam_application_id' => Yii::t('app', 'Exam Application'),
			'exam_schedule_id' => Yii::t('app', 'Exam Schedule'),
			'created' => Yii::t('app', 'Created'),
			'modified' => Yii::t('app', 'Modified'),
			'is_office' => Yii::t('app', 'Is Office'),
			'doc_sub' => Yii::t('app', 'Doc Sub'),
			'receipt_approver' => Yii::t('app', 'Receipt Approver'),
			'receipt_position' => Yii::t('app', 'Receipt Position'),
			'receipt_year' => Yii::t('app', 'Receipt Year'),
			'receipt_no' => Yii::t('app', 'Receipt No'),
			'receipt_income_code' => Yii::t('app', 'Receipt Income Code'),
			'payer_code' => Yii::t('app', 'Payer Code'),
			'approve_id' => Yii::t('app', 'Approve'),
			'approve_name' => Yii::t('app', 'Approve Name'),
			'approve_position' => Yii::t('app', 'Approve Position'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('doc_year', $this->doc_year);
		$criteria->compare('doc_no', $this->doc_no);
		$criteria->compare('doc_name', $this->doc_name, true);
		$criteria->compare('payment_date', $this->payment_date, true);
		$criteria->compare('amount', $this->amount, true);
		$criteria->compare('payer_name', $this->payer_name, true);
		$criteria->compare('exam_application_id', $this->exam_application_id);
		$criteria->compare('exam_schedule_id', $this->exam_schedule_id);
		$criteria->compare('created', $this->created, true);
		$criteria->compare('modified', $this->modified, true);
		$criteria->compare('is_office', $this->is_office);
		$criteria->compare('doc_sub', $this->doc_sub);
		$criteria->compare('receipt_approver', $this->receipt_approver, true);
		$criteria->compare('receipt_position', $this->receipt_position, true);
		$criteria->compare('receipt_year', $this->receipt_year);
		$criteria->compare('receipt_no', $this->receipt_no);
		$criteria->compare('receipt_income_code', $this->receipt_income_code, true);
		$criteria->compare('payer_code', $this->payer_code, true);
		$criteria->compare('approve_id', $this->approve_id);
		$criteria->compare('approve_name', $this->approve_name, true);
		$criteria->compare('approve_position', $this->approve_position, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}