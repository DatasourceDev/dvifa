<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property string $id
 * @property string $username
 * @property string $secret
 * @property string $email
 * @property string $created
 * @property string $modified
 * @property integer $role_id
 * @property string $last_login
 * @property integer $is_superuser
 * @property string $title
 * @property string $firstname
 * @property string $lastname
 * @property string $teacher_code
 * @property string $legacy_secret
 * @property integer $is_legacy
 *
 * @property Role $role
 * @property WebContent[] $webContents
 * @property WebTheme[] $webThemes
 */
abstract class BaseUser extends ActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'username';
	}

	public function rules() {
		return array(
			array('role_id, is_superuser, is_legacy', 'numerical', 'integerOnly'=>true),
			array('username, email, title, firstname, lastname, teacher_code', 'length', 'max'=>60),
			array('secret, legacy_secret', 'length', 'max'=>128),
			array('created, modified, last_login', 'safe'),
			array('username, secret, email, created, modified, role_id, last_login, is_superuser, title, firstname, lastname, teacher_code, legacy_secret, is_legacy', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, username, secret, email, created, modified, role_id, last_login, is_superuser, title, firstname, lastname, teacher_code, legacy_secret, is_legacy', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'role' => array(self::BELONGS_TO, 'Role', 'role_id'),
			'webContents' => array(self::HAS_MANY, 'WebContent', 'user_id'),
			'webThemes' => array(self::HAS_MANY, 'WebTheme', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'username' => Yii::t('app', 'Username'),
			'secret' => Yii::t('app', 'Secret'),
			'email' => Yii::t('app', 'Email'),
			'created' => Yii::t('app', 'Created'),
			'modified' => Yii::t('app', 'Modified'),
			'role_id' => null,
			'last_login' => Yii::t('app', 'Last Login'),
			'is_superuser' => Yii::t('app', 'Is Superuser'),
			'title' => Yii::t('app', 'Title'),
			'firstname' => Yii::t('app', 'Firstname'),
			'lastname' => Yii::t('app', 'Lastname'),
			'teacher_code' => Yii::t('app', 'Teacher Code'),
			'legacy_secret' => Yii::t('app', 'Legacy Secret'),
			'is_legacy' => Yii::t('app', 'Is Legacy'),
			'role' => null,
			'webContents' => null,
			'webThemes' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('secret', $this->secret, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('created', $this->created, true);
		$criteria->compare('modified', $this->modified, true);
		$criteria->compare('role_id', $this->role_id);
		$criteria->compare('last_login', $this->last_login, true);
		$criteria->compare('is_superuser', $this->is_superuser);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('firstname', $this->firstname, true);
		$criteria->compare('lastname', $this->lastname, true);
		$criteria->compare('teacher_code', $this->teacher_code, true);
		$criteria->compare('legacy_secret', $this->legacy_secret, true);
		$criteria->compare('is_legacy', $this->is_legacy);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}